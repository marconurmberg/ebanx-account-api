<?php

namespace App\Controllers;

use App\BusinessLayer\Domain\Adapter\InputToEventDTOAdapterInterface;
use App\BusinessLayer\Domain\Adapter\UserAccountResponseAdapterInterface;
use App\BusinessLayer\Domain\Enum\ResponseMessagesEnum;
use App\BusinessLayer\Domain\Repository\UserAccountRepositoryInterface;
use App\BusinessLayer\Infra\Adapter\InputToEventDTOAdapter;
use App\BusinessLayer\Infra\Adapter\UserAccountResponseAdapter;
use App\BusinessLayer\Infra\Exception\AccountOperationEventNotFoundException;
use App\BusinessLayer\Infra\Factory\OperationEventStrategyFactory;
use App\BusinessLayer\Infra\Repository\UserAccountRepository;
use App\BusinessLayer\Infra\Service\PersistenceInitializationService;
use App\BusinessLayer\UseCases\GetAccountBalance;
use CodeIgniter\HTTP\RequestInterface;
use CodeIgniter\HTTP\ResponseInterface;
use Faker\Provider\Base;
use Psr\Log\LoggerInterface;

class AccountController extends BaseController
{
    protected UserAccountRepositoryInterface $userAccountRepository;
    protected UserAccountResponseAdapterInterface $userAccountResponseAdapter;

    public function initController(RequestInterface $request, ResponseInterface $response, LoggerInterface $logger)
    {
        parent::initController($request, $response, $logger); // TODO: Change the autogenerated stub
        $this->userAccountRepository = new UserAccountRepository($this->cacheService);
        $initPersistenceService = new PersistenceInitializationService($this->userAccountRepository);
        $initPersistenceService->init();
    }

    public function getAccountBalance() {
        $accountId = $this->request->getGet("account_id");
        if (empty($accountId) || !is_numeric($accountId)) {
            return $this->returnMissingRequiredParameters();
        }

        $useCase = new GetAccountBalance($this->userAccountRepository);
        $getBalanceResponse = $useCase->execute($accountId);

        return $this->response
            ->setStatusCode($getBalanceResponse->getHttpStatus())
            ->setJSON($getBalanceResponse->getBody());
    }

    public function handleAccountOperationEvent()
    {
        try {
            $eventType = $this->request->getJsonVar("type");
            if (empty($eventType)) {
                return $this->returnMissingRequiredParameters();
            }
            $inputData = $this->request->getJSON(true);

            $useCase = new OperationEventStrategyFactory(
                $this->userAccountRepository
            )->create($eventType);

            $eventResponse = $useCase->execute($inputData);
            return $this->response
                ->setStatusCode($eventResponse->getHttpStatus())
                ->setJSON($eventResponse->getBody());
        } catch (AccountOperationEventNotFoundException $exception) {
            return $this->response
                ->setStatusCode(ResponseInterface::HTTP_BAD_REQUEST)
                ->setJSON($exception->getMessage());
        } catch (\Exception $exception) {
            return $this->response
                ->setStatusCode(ResponseInterface::HTTP_INTERNAL_SERVER_ERROR)
                ->setJSON(ResponseMessagesEnum::RESPONSE_MESSAGE_ERROR);
        }
    }
}